type Query {
  currentUser: User!
  feed(from: String!, take: number!): feedConnection!
}

type Mutation {
  createTweet(tweet: CreateTweetInput!): CreateTweetPayload!
  createUser(uuid: String!): CreateUserPayload!
}

input CreateTweetInput {
  body: String!
  visibility: Visibility!
}

type CreateTweetPayload {
  tweet: Tweet!
  successfull: Boolean!
}

type CreateUserPayload {
  user: User!
  successfull: Boolean!
}

type feedConnection {
  edges: [feedEdge!]!
  pageInfo: pageInfo
}

type feedEdge {
  cursor: String!
  node: Tweet
}

type pageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  bio: String!
  location: String!
  avatarUrl: String!
  followersCount: Int!
  followingCount: Int!
  createdAt: String!
}

type Tweet {
  id: ID!
  body: String!
  author: User!
  createdAt: String!
  retweetCount: Int!
  likeCount: Int!
  replyCount: Int!
  visibility: Visibility!
  type: TweetType!
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum TweetType {
  ORIGINAL
  RETWEET
  REPLY
}